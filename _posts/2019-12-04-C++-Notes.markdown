---
layout: post
title:  "C++ Notes"
date:   2019-12-04
categories: c++

---

> C++的学习记录

---
- 觉悟  
感觉一个cpp文件就是类似于Java的一个类文件
- #include <iostream>  
意思是包含头文件iostream
- using namespace std;  
意思是使用命名空间std,注意后面的分号
- 枚举类型的格式  
enum 类型名称 {我的类型1，我的类型2} 变量名称，之后就使用你自定义的变量名称来操作。  
例如enum color{red,blue,green} c  
注意：你一个red背后默认代表的数值是0
- 变量的声明  
只是在编译的时候告诉编译器我存在这个变量，让编译器不要报错。所以干脆就每次使用变量之前先定义不就行了。
- 全局变量和局部变量
代码块里面的就是局部变量，外面的就是全局变量。需要注意的就是全局变量会被自动初始化，而局部变量需要自己赋值。
- 定义常量  
使用define来定义就行了，#define LENGTH 5（感觉加#的都不用带末尾的分号）  
或者使用const,例如const int LENGTH= 5;(把常量全部大写更专业一点)
- 存储类  
从未听说给这种东西。其中使用static来修饰方法中的局部变量，会使得该变量被所有调用这个方法时共享，意思就是说每次调用这个方法时这个局部变量不重新定义，就是说这个局部变量是有记忆的。
如果使用static来修饰全局变量，会使得这个全局变量只在该文件中可见。  
extern来使用其他文件中定义的函数或者变量，例如extern void write_extern();或者extern int count等。
- 运算符  
位运算符有&|^,逻辑运算符有&&，||，！。我经常搞混掉。
- 参数传递的方式
有三种，值传递-引用传递-指针传递，我最讨厌这个了。
- lambada表达式  
格式是这样的[]（传入参数）->返回值的类型{函数体}，例如[]（int x,int y)->int{return x+y;}第一个中括号里面的内容请自己查看资料，没怎么看懂不想讲。
- 头文件cmath  
里面有很多的数学函数，需要的时候请查询这里。
- 数组的声明  
double balance[10];  
初始化是：string a[5] = { "foo", "", "", "", "" };  
获取数组长度：sizeof(array) / sizeof(array[0])
- 字符串  
有两种方式。第一种方式是C语言中的字符数组的方式，注意，字符数组的最后以为是\0结束符。  
第二种方式是C++里面的string对象，和Java里面的有一点像。
- 指针
&a可以获得a变量的内存地址，例如0xbfebd5c0。使用指针来存储这个地址，例如int a=20;int*ip;
ip=&a;注意这个指针声明前面的int只是表示这个指针指向的数字是一个int值，因为不同数据类型的指针存储的都是一样格式的内存地址。
- 引用  
例如int&  r=i;感觉和指针差不多，区别在于三点。第一点是引用只能初始化一次，我指向一个对象之后就不能再指向其他的对象。第二点是引用在创建的时候必须初始化。第三点就是引用肯定不是空的，这一条可由第二条获得。
```
#include <iostream>
using namespace std;
// main() 是程序开始执行的地方
int main() {
   cout << "Hello World";
   // 输出 Hello World
   return 0;
}
```
- C++定义方法
```
// This program has two functions: main and displayMessage.
#include <iostream>
using namespace std;
// Function prototype
void displayMessage();
//main函数
int main()
{
    cout << "Hello from main.\n";
    displayMessage(); // Call.displayMessage
    cout << "Now we are back in the main function again. \n";
    return 0;
}
void displayMessage()
{
    cout << "Hello from the displayMessage function.\n";
}
```
